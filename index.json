[{"content":"Hello folks, here are the steps I had to take to eventually get single GPU passthrough working on Arch Linux with QEMU with an AMD GPU (specifically a PowerColor Red Devil 5700XT 8GB), the problems i had to face and the solutions I found to said problems.\nBut first, why? Well, dual-booting Windows has always been a bummer to me. Sure, it works wonders in terms of performance for gaming, you\u0026rsquo;re playing on actual Windows without any translation going on, but having to reboot the computer and dedicating a specific amount of space for it always rubbed me the wrong way. With that being said, I\u0026rsquo;m no expert, there\u0026rsquo;s plenty of other reasons for using a VM instead of dual-booting, lots that I probably forgot and lots that I just don\u0026rsquo;t know about.\nSupported Devices Vendor Family Common Name(s) AMD Polaris 10 RX 470, 480, 570, 580, 590 AMD Polaris 11 RX 460, 560 AMD Polaris 12 RX 540, 550 AMD Vega 10 Vega 56/64/FE AMD Vega 20 Radeon VII AMD Navi 10 5600XT, 5700, 5700XT AMD Navi 12 Pro 5600M AMD Navi 14 Pro 5300, RX 5300, 5500XT \u0026hellip; \u0026hellip; \u0026hellip; Note that this list isn\u0026rsquo;t comprehensive, it merely contains the AMD GPUs that suffer from the same problems I faced[^1] and are certain work with steps I provide, even ones from NVIDIA are likely to work, read this similar guide.\nBefore begining make sure your machine has virtualization capabilities and that they\u0026rsquo;re activated. You can go to your BIOS and check it there.\n(please note this was done on 5.18.7-arch1-1)\nPackages To follow this guide you should get the following packages,\nName Description Repository virt-manager(GUI), libvirt Front-end for libvirt APKG qemu-full System Emulation APKG dnsmasq, bridge-utils, openbsd-netcat, vde2 Networking APKG libguestfs Filesystem access, management APKG dkms Dynamic module manager APKG Editing Grub Edit the file /etc/default/grub.\nsudo nano /etc/default/grub AMD CPUs Find the line GRUB_CMDLINE_LINUX_DEFAULT=\u0026quot;quiet splash\u0026quot; and Change it to\nGRUB_CMDLINE_LINUX_DEFAULT=\u0026#34;amd_iommu=on iommu=pt iommu=1 video=efifb:off quiet splash\u0026#34; Intel CPUs Find the line GRUB_CMDLINE_LINUX_DEFAULT=\u0026quot;quiet splash\u0026quot; and Change it to\nGRUB_CMDLINE_LINUX_DEFAULT=\u0026#34;intel_iommu=on iommu=pt iommu=1 video=efifb:off quiet splash\u0026#34; Then update grub and reboot.\nsudo grub-mkconfig -o /boot/grub/grub.cfg ; sudo reboot Once rebooted, check that the grub loader loaded the paramaters.\nsudo cat /proc/cmdline It should look similar to:\nBOOT_IMAGE=/boot/vmlinuz-5.4.0-60-generic root=UUID=0587b30a-06cf-4df2-82fe-fb8db547e1c5 ro amd_iommu=on iommu=pt iommu=1 video=efifb:off quiet splash vt.handoff=1 Installing Virt-Manager and QEMU First, make sure your system is up-to-date.\nparu # Or any equivalent command Run the following command to get the virtualizer and other useful packages installed:\nsudo pacman -S qemu virt-manager dnsmasq vde2 bridge-utils openbsd-netcat libguestfs Start and enable libvirtd, in my case, with systemctl.\nsudo systemctl start libvirtd sudo systemctl enable libvirtd Edit the libvirtd configuration file.\nsudo nvim /etc/libvirt/libvirtd.conf Verify the following values: unix_sock_group = \u0026quot;libvirt\u0026quot; unix_sock_ro_perms = \u0026quot;0777\u0026quot; unix_sock_rw_perms = \u0026quot;0770\u0026quot; Add the current user to the libvirt group.\nsudo usermod -aG libvirt \u0026lt;username\u0026gt; Edit the qemu configuration file.\nsudo nvim /etc/libvirt/qemu.conf Verify the following values: user = \u0026quot;\u0026lt;username\u0026gt;\u0026quot; group = \u0026quot;\u0026lt;username\u0026gt;\u0026quot; Add the current user to the kvm group.\nsudo usermod -aG kvm \u0026lt;username\u0026gt; Restart the libvirtd service.\nsudo systemctl restart libvirtd Getting the GPU bios Next, find out the PCI address of your GPU and it\u0026rsquo;s audio companion with,\nlspci -nnk There should be a VGA compatible entry (...) \u0026lt;name_of_your_card\u0026gt; and Audio Device (...) entries, only differing in the last digit. Save the addresses for later.\nNow go to this website and find the bios for your GPU. Make sure to select the exact GPU you have and not a slightly different version. Create the following directory,\n/var/lib/libvirt/vgabios/ And save the bios file here with a simple name such as 5700xt_rd.rom. Make yourself the owner of the file and change the permissions to read and execute at least for all types of users.\nsudo chown \u0026lt;user\u0026gt;:\u0026lt;user\u0026gt; \u0026lt;name_of_rom\u0026gt; ; sudo chmod -R 775 \u0026lt;name_of_rom\u0026gt; Setting up the VM Open Virt Manager, click \u0026ldquo;create a new machine\u0026rdquo; (I\u0026rsquo;ll be doing a Windows 10 Guest) and proceed.\nBrowse your filesystem and select the image file for the guest, make sure Virt Manager indentifies the OS correctly (it should have automatic detection enabled by default) or otherwise, select one from the list yourself.\nSelect the amount of memory and cores you want to give to the system and the amount of storage space.\nTick \u0026ldquo;Customize configuration before install\u0026rdquo;.\nSelect Q35 as the Chipset and (...)x64/OVMF_CODE.fd as the firmware.\nClick on the XML option tab above, find and remove \u0026lt;timer name=\u0026quot;rtc\u0026quot; (...) and \u0026lt;timer name=\u0026quot;pit\u0026quot; (...) just below it and change \u0026lt;timer name=\u0026quot;hpet\u0026quot; present=\u0026quot;no\u0026quot;\u0026gt; to \u0026quot;yes\u0026quot;, this should prevent some unwanted performance loss.\nMove to the CPUs panel, tick \u0026ldquo;Manually set CPU Topology\u0026rdquo; and make sure the # of sockets is less or equal to the number of physical cores on your CPU, then adjust the rest to match your needs.\nIn the image the box is unticked and # of sockets is wrong, as I only have a single gpu... Apply the settings and begin installation.\nOnce your guest system is installed, close it and re-open the settings page by selecting the machine, clicking Open, and selecting Show virtual hardware settings.\nRight-click and remove the following items(* = necessary removal):\nSATA CDROM: the disc image just used for installing the system, no longer necessary Tablet: keep it if you want, but probably not going to need it Display Spice* Sound ich9 Console Channel Spice* Video QXL* USB Redirectors* If you have trouble removing the ones marked with an extra symbol or any others because of Spice etc etc, do the following sudo virsh edit \u0026lt;name_of_machine\u0026gt;, in my case sudo virsh edit win10, then find all \u0026ldquo;spice\u0026rdquo; entries and remove them.\nExample of entries to remove... Click \u0026ldquo;Add Hardware\u0026rdquo;, select \u0026ldquo;PCI Host Device\u0026rdquo; and add your GPU and audio companion with the addresses saved from earlier.\nClick \u0026ldquo;Add Hardware\u0026rdquo; again and add \u0026ldquo;USB Host Device\u0026rdquo; for your Keyboard, Mouse and other peripherals.\nAdding USB Entries and then disconnecting the devices won\u0026rsquo;t allow the machine to start unless you add the specific flag. Also, unplugging devices after the machines has already booted and then reinserting them won\u0026rsquo;t work, you will need to restart the machine to use them again.\nAll these issues are fixed by using USB Redirection, which requires Spice, which we cannot use for single gpu passthrough\u0026hellip;\nSelect the PCI Entry added for your GPU and click the XML tab, add the following between the \u0026lt;/source\u0026gt; and \u0026lt;address (...)\u0026gt; lines.\n\u0026lt;rom file=\u0026#34;/var/lib/libvirt/vgabios/\u0026lt;name_of_rom\u0026gt;\u0026#34;/\u0026gt; Installing scripts Now, let\u0026rsquo;s install the scripts to realize the transition between Host and Guest Machines.\nClone this repository, get execute permissions with chmod +x install_hooks.sh and run the script.\nEdit hooks/qemu by replacing \u0026ldquo;win10\u0026rdquo; with the name of your VM\nOPERATION=\u0026#34;$2\u0026#34; if [[ $OBJECT == \u0026#34;win10\u0026#34; ]]; then case \u0026#34;$OPERATION\u0026#34; in Now save everything and try running the VM, if everything loads normally, Great! Although, try shutting down afterwards\u0026hellip; If you\u0026rsquo;re stuck with a black-screen and your GPU is one of the listed initially, then your card probably has the Reset Bug, which gnif has miraculously provided a fix for!\nvendor-reset fix The only downside to vendor-reset is that it has been a long time since it has been updated, so it doesn\u0026rsquo;t work as properly as it did back when it came out, so I had to do some more digging. Since this is all open-source, the community has found a minor fix to overcome the problems brought with the newer linux kernels.\nAnyway, either install vendor-reset with an AUR helper or clone the repository and install the patch with sudo dkms install ., now vendor-reset should be added as an out-of-tree kernel module. If the command fails it probably means you\u0026rsquo;re lacking linux-headers to build the module (remove the module with sudo dkms remove vendor-reset and after installing the headers, try again).\nCreate and edit the following file to make systemd automatically load the module at boot time /etc/modules-load.d/vendor-reset.conf,\nvendor-reset Edit /etc/libvirt/hooks/qemu to add the following line at the beggining of \u0026ldquo;prepare\u0026rdquo; and end of \u0026ldquo;release\u0026rdquo;.\necho \u0026#39;device_specific\u0026#39; \u0026gt; /sys/bus/pci/devices/0000:09:00.0/reset_method Reboot your PC and test the results!\nBugs, crashes, etc. If you still find yourself getting errors, then try enabling libvirt logs. /etc/libvirt/libvirtd.conf\nlog_filters=\u0026#34;1:qemu\u0026#34; log_outputs=\u0026#34;1:file:/var/log/libvirt/libvirtd.log\u0026#34; Credits, Links, etc. Single GPU Passthrough Scripts Single GPU Passthrough in Ubuntu AMD CPU/GPU Half of this guide but probably more complete and in video format (lole) QEMU/Virt Manager Introduction The virtio driver didn\u0026rsquo;t turn out necessary, but on a second try it did! Sharing files between Host and Guest Machines KVM-GPU-Passthrough Guide AMD GPUs don\u0026rsquo;t require patching VGABIOS Database Forums, More forums, YAF, YAFF Arch Linux Forums Arch Linux Wiki (mkinitcpio), Virt Manager Libvirt Wiki (hooks) vendor-reset, gnif talks vendor-reset ","permalink":"/posts/single-gpu-passthrough/","summary":"Hello folks, here are the steps I had to take to eventually get single GPU passthrough working on Arch Linux with QEMU with an AMD GPU (specifically a PowerColor Red Devil 5700XT 8GB), the problems i had to face and the solutions I found to said problems.\nBut first, why? Well, dual-booting Windows has always been a bummer to me. Sure, it works wonders in terms of performance for gaming, you\u0026rsquo;re playing on actual Windows without any translation going on, but having to reboot the computer and dedicating a specific amount of space for it always rubbed me the wrong way.","title":"Single GPU Passthrough on linux with AMD"}]